using System;

public static class TestRunner
{
	private readonly struct Test
	{
		public readonly string Input;
		public readonly string Output;
		public readonly bool Active;
		public readonly bool HasOutput;

		public Test(string input, string output, bool active, bool hasOutput)
		{
			Input = input;
			Output = output;
			Active = active;
			HasOutput = hasOutput;
		}
	};

	private static bool Check(string expected, string actual)
	{
		expected = expected.Replace(" ", "").Replace( "\r", "" ).Replace( "\n", "" );
		actual = actual.Replace(" ", "").Replace( "\r", "" ).Replace( "\n", "" );
		return expected == actual;
	}

	public static void Main()
	{
		Test[] tests =
		{
			%Tests%
		};
		var allAC = true;
		var testId = 0;
		var maxTime = new TimeSpan();
		foreach (var test in tests)
		{
			Console.WriteLine($"Test #{++testId}");
			Console.WriteLine($"Input: \n{test.Input}");
			if (test.HasOutput)
			{
				Console.WriteLine("Expected output: ");
				Console.WriteLine(test.Output);
			}
			else
			{
				Console.WriteLine("Expected output: ");
				Console.WriteLine("N/A");
			}

			if (test.Active)
			{
				var reader = new System.IO.StringReader(test.Input);
				var writer = new System.IO.StringWriter();
				var stopwatch = new System.Diagnostics.Stopwatch();
				stopwatch.Start();

				var solver = new %ClassName%();
				solver.Solve(reader, writer);

				stopwatch.Stop();
				var currentTime = stopwatch.Elapsed;
				maxTime = currentTime < maxTime ? maxTime : currentTime;

				Console.WriteLine("Actual output: ");
				Console.WriteLine(writer.GetStringBuilder().ToString());
				if (test.HasOutput)
				{
					bool result = Check(test.Output, writer.GetStringBuilder().ToString());
					allAC = allAC && result;
					PrintStatus(result ? Status.AC : Status.WA);
				}

				Console.WriteLine($"Time: {currentTime.TotalSeconds:F5}s.");
			}
			else
			{
				Console.WriteLine("SKIPPED");
			}
			Console.WriteLine();
		}

		PrintStatus(allAC ? Status.AC : Status.WA, true);

		Console.WriteLine($"Maximal time: {maxTime.TotalSeconds:F5}s.");
	}

	private static void PrintStatus(Status status, bool all = false)
	{
		switch (status)
		{
			case Status.CE:
			case Status.MLE:
			case Status.TLE:
			case Status.RE:
			case Status.OLE:
			case Status.IE:
			case Status.WA:
				Console.BackgroundColor = ConsoleColor.DarkYellow;
				break;
			case Status.AC:
				Console.BackgroundColor = ConsoleColor.Green;
				break;
			default:
				throw new ArgumentOutOfRangeException(nameof(status), status, null);
		}

		Console.WriteLine(all ? $"=== {status.ToString()} ===" : status.ToString());
		Console.ResetColor();
	}

	private enum Status
	{
		CE,
		MLE,
		TLE,
		RE,
		OLE,
		IE,
		WA,
		AC
	}
}
